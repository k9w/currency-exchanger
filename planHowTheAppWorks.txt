This plaintext document outlines my thought process while designing
this application.

Convert US Dollars into other currencies.


Expected input:

 - An amount of US dollars.

 - One of at least five alternate currencies from a multiple-choice
   list, plus an 'other' option for the "doesn't exist" functionality
   below.

Expected output:

 - The quantity of the exchanged currency, based on the amount of US
   dollars.
   
 - Report any API error directly in the Document Object Model (DOM).

 - For the 'other' currency option, notify the user that the selected
   currency does not exist.


To achieve that, do this:

The API documentation specifies the free plan, the one we'll use, only
updates its currency exchange rates once per day. Therefore:

Only call the API for the first request or when the page first loads;
and store the full list of rates for all subsequent requests until the
user reloads the page.

This should give us an array of currency codes and exchange rates to
the US dollar; because our request has the US dollar as the base
currency.

Then for each request, gather the quantity of US dollars (just whole
dollars for now), and the desired three letter currency code from the
user.

Lookup that currency code in our array to get the conversion rate.

Multiply the amount of dollars by that conversion rate.

Display the result to the user.



Error handling


Check that the length of input is three characters.





Define a class object constructor CurrencyExchange with the following
properties and values as constants.

Planet 	       Planet's year in Earth years

Mercury	        0.24
Venus	        0.62
Mars	        1.88
Jupiter	       11.86


Define a class object constructor UserAgeAndLifeExpectancy with
initial properties:

 - userAgeInput

 - userLifeExpectancyInput

Additional properties can be added from methods defined below.


Instantiate a class object currencyExchange from its constructor.


Instantiate a class object userAgeAndLifeExpectancy from its
constructor.


Define a method earthYearsRemainingToLive to subtract the user's
current age from the life expectancy they entered to get Earth years
remaining to live. If the user's age is higher than their life
expectancy, instead output the number of years the user has lived past
their life expectancy.

Output:

 - userEarthYearsRemainingToLive Or

 - earthYearsLivedPastTheLifeExpectancy

Add one of those variables, with its value, as a new third property to
the object userAgeAndLifeExpectancy.


Define a method convertEarthYearsToOtherPlanetYears to loop through
each of these inputs:

 - userAgeInput

 - userLifeExpectancyInput

 - userEarthYearsRemainingToLive OR

 - earthYearsLivedPastTheLifeExpectancy

For each planet, multiply or divide the number value by the constant
stored for that planet property in object planetOrbits.


For example, here is how it would look with
 userEarthYearsRemainingToLive:

Mercury:

 - ageInMercuryYears

 - mercuryYearsRemainingToLive


Venus:

 - ageInVenusYears

 - venusYearsRemainingToLive


Mars:

 - ageInMarsYears

 - marsYearsRemainingToLive


Jupiter:

 - ageInJupiterYears

 - jupiterYearsRemainingToLive


As a second example, here is how it would look with
earthYearsLivedPastTheLifeExpectancy:


Mercury:

 - ageInMercuryYears

 - mercuryYearsLivedPastTheLifeExpectancy


Venus:

 - ageInVenusYears

 - venusYearsLivedPastTheLifeExpectancy


Mars:

 - ageInMarsYears

 - marsYearsLivedPastTheLifeExpectancy


Jupiter:

 - ageInJupiterYears

 - jupiterYearsLivedPastTheLifeExpectancy


As the loop progresses, add each variable and value as a new property
to the object userAgeAndLifeExpectancy.


Display the results to the user.
